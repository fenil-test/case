{{ 'template-collection.css' | asset_url | stylesheet_tag }}
{{ 'component-card.css' | asset_url | stylesheet_tag }}
{{ 'component-price.css' | asset_url | stylesheet_tag }}

{% if section.settings.image_shape == 'blob' %}
  {{ 'mask-blobs.css' | asset_url | stylesheet_tag }}
{% endif %}

{% unless section.settings.quick_add == 'none' %}
  {{ 'quick-add.css' | asset_url | stylesheet_tag }}
{% endunless %}

{% if section.settings.quick_add == 'standard' %}
  <script src="{{ 'quick-add.js' | asset_url }}" defer="defer"></script>
  <script src="{{ 'product-form.js' | asset_url }}" defer="defer"></script>
{% endif %}

{% if section.settings.quick_add == 'bulk' %}
  <script src="{{ 'quick-add-bulk.js' | asset_url }}" defer="defer"></script>
  <script src="{{ 'quick-order-list.js' | asset_url }}" defer="defer"></script>
  <script src="{{ 'quantity-popover.js' | asset_url }}" defer="defer"></script>
  <script src="{{ 'price-per-item.js' | asset_url }}" defer="defer"></script>
{% endif %}

{% style %}
  .section-{{ section.id }}-padding {
    padding-top: {{ section.settings.padding_top | times: 0.75 | round: 0 }}px;
    padding-bottom: {{ section.settings.padding_bottom | times: 0.75 | round: 0 }}px;
  }

  @media screen and (min-width: 750px) {
    .section-{{ section.id }}-padding {
      padding-top: {{ section.settings.padding_top }}px;
      padding-bottom: {{ section.settings.padding_bottom }}px;
    }
  }
{% endstyle %}

<div class="section-{{ section.id }}-padding gradient color-{{ section.settings.color_scheme }}">
  {% paginate collection.products by section.settings.products_per_page %}
    {% comment %} Sort is the first tabbable element when filter type is vertical {% endcomment %}
    {% if section.settings.enable_sorting and section.settings.filter_type == 'vertical' %}
      <facet-filters-form class="facets facets-vertical-sort page-width small-hide">
        <form class="facets-vertical-form" id="FacetSortForm">
          <div class="facet-filters sorting caption">
            <div class="facet-filters__field">
              <h2 class="facet-filters__label caption-large text-body">
                <label for="SortBy">{{ 'products.facets.sort_by_label' | t }}</label>
              </h2>
              <div class="select">
                {% assign sort_by = collection.sort_by | default: collection.default_sort_by %}
                <select
                  name="sort_by"
                  class="facet-filters__sort select__select caption-large"
                  id="SortBy"
                  aria-describedby="a11y-refresh-page-message">
                  {% for option in collection.sort_options %}
                    <option
                      value="{{ option.value | escape }}"
                      {% if option.value == sort_by %}
                      selected="selected"
                      {% endif %}>
                      {{ option.name | escape }}
                    </option>
                  {% endfor %}
                </select>
                {% render 'icon-caret' %}
              </div>
            </div>
          </div>

          <div class="product-count-vertical light" role="status">
            <h2 class="product-count__text text-body">
              <span id="ProductCountDesktop">
                {% if collection.results_count %}
                  {{
                    'templates.search.results_with_count' | t: terms: collection.terms, count: collection.results_count
                  }}
                {% elsif collection.products_count == collection.all_products_count %}
                  {{ 'products.facets.product_count_simple' | t: count: collection.products_count }}
                {% else %}
                  {{
                    'products.facets.product_count' | t: product_count: collection.products_count, count: collection.all_products_count
                  }}
                {% endif %}
              </span>
            </h2>
            {% render 'loading-spinner' %}
          </div>
        </form>
      </facet-filters-form>
    {% endif %}

    <div class="{% if section.settings.filter_type == 'vertical' %} facets-vertical page-width{% endif %}">
      {{ 'component-facets.css' | asset_url | stylesheet_tag }}
      <script src="{{ 'facets.js' | asset_url }}" defer="defer"></script>
      {% if section.settings.enable_filtering or section.settings.enable_sorting %}
        <aside
          aria-labelledby="verticalTitle"
          class="facets-wrapper{% unless section.settings.enable_filtering %} facets-wrapper--no-filters{% endunless %}{% if section.settings.filter_type != 'vertical' %} page-width{% endif %}"
          id="main-collection-filters"
          data-id="{{ section.id }}">
          {% render 'facets'
            , results: collection
            , enable_filtering: section.settings.enable_filtering
            , enable_sorting: section.settings.enable_sorting
            , filter_type: section.settings.filter_type
            , paginate: paginate
          %}
        </aside>
      {% endif %}

      <div
        class="product-grid-container{% if settings.animations_reveal_on_scroll %} scroll-trigger animate--slide-in{% endif %}"
        id="ProductGridContainer"
        {% if settings.animations_reveal_on_scroll %}
        data-cascade
        {% endif %}>
        {% if collection.products.size == 0 %}
          <div
            class="collection collection--empty page-width"
            id="product-grid"
            data-id="{{ section.id }}">
            <div class="loading-overlay gradient"></div>
            <div class="title-wrapper center">
              <h2 class="title title--primary">
                {{ 'sections.collection_template.empty' | t }}
                <br>
                {{
                  'sections.collection_template.use_fewer_filters_html' | t: link: collection.url, class: 'underlined-link link'
                }}
              </h2>
            </div>
          </div>
        {% else %}
          <div class="collection{% if section.settings.filter_type != 'vertical' %} page-width{% endif %}">
            <div class="loading-overlay gradient"></div>
            <ul
              id="product-grid"
              data-id="{{ section.id }}"
              class="
                grid product-grid grid--{{ section.settings.columns_mobile }}-col-tablet-down
                grid--{{ section.settings.columns_desktop }}-col-desktop
                {% if section.settings.quick_add == 'bulk' %} collection-quick-add-bulk{% endif %}
              ">
              {% for product in collection.products %}
                {% assign lazy_load = false %}
                {% if forloop.index > 2 %}
                  {% assign lazy_load = true %}
                {% endif %}
                <li
              class="grid__item product-card {% if settings.animations_reveal_on_scroll %} scroll-trigger animate--slide-in{% endif %}"
              {% if settings.animations_reveal_on_scroll %}
              data-cascade
              style="--animation-order: {{ forloop.index }};"
              {% endif %}
              data-id="{{ product.handle }}"
              data-title="{{ product.title }}"
              data-price="{{ product.price | money }}"
              data-image="{{ product.featured_image | img_url: 'large' }}"
              {% for option in product.options_with_values %}
              {% assign option_name = option.name | handle %}
              {% assign option_values = option.values %}
              data-{{ option_name }}="{{ option_values | join: ', ' }}"
              {% endfor %}
              data-color-ids="{% for option in product.options_with_values %}{% if option.name == 'Color' %}{% for color in option.values %}{{ color.id }}{% unless forloop.last %},{% endunless %}{% endfor %}{% endif %}{% endfor %}"
              data-size-ids="{% for option in product.options_with_values %}{% if option.name == 'Size' %}{% for color in option.values %}{{ color.id }}{% unless forloop.last %},{% endunless %}{% endfor %}{% endif %}{% endfor %}" 
          >
              {% render 'card-product'
                  , card_product: product
                  , media_aspect_ratio: section.settings.image_ratio
                  , image_shape: section.settings.image_shape
                  , show_secondary_image: section.settings.show_secondary_image
                  , show_vendor: section.settings.show_vendor
                  , show_rating: section.settings.show_rating
                  , lazy_load: lazy_load
                  , quick_add: section.settings.quick_add
                  , section_id: section.id
              %}
          </li>
              {% endfor %}
            </ul>

            {% if paginate.pages > 1 %}
              {% render 'pagination'
                , paginate: paginate
                , anchor: '' %}
            {% endif %}
          </div>
        {% endif %}
      </div>
    </div>
  {% endpaginate %}
  {% if section.settings.image_shape == 'arch' %}
    {% render 'mask-arch' %}
  {% endif %}
</div>

<div class="add-to-bag-overlay">
  <div class="overlay">
    <div class="choose-options">
      <p>Choose options</p>
      <div class="drawer-close-icon">
          {%  render 'close-icon' %}
      </div>  
    </div>
    <div class="overlay-box">

    </div>
    <div class="drawer-btn">
      <div class="price-per-item__container">
        <quantity-input class="quantity">
          <button
            class="quantity__button"
            name="minus"
            type="button">
            <span class="visually-hidden">
              {{- 'products.product.quantity.decrease' | t: product: product.title | escape -}}
            </span>
            {% render 'icon-minus' %}
          </button>
          <input
            class="quantity__input"
            type="number"
            name="quantity"
            value="1"

            id="Quantity-{{ section.id }}"
            data-cart-quantity="{{ cart_qty }}"
            data-min="{{ product.selected_or_first_available_variant.quantity_rule.min }}"
            min="{{ product.selected_or_first_available_variant.quantity_rule.min }}"
            {% if product.selected_or_first_available_variant.quantity_rule.max != null %}
            data-max="{{ product.selected_or_first_available_variant.quantity_rule.max }}"
            max="{{ product.selected_or_first_available_variant.quantity_rule.max }}"
            {% endif %}
            step="{{ product.selected_or_first_available_variant.quantity_rule.increment }}"
            value="{{ product.selected_or_first_available_variant.quantity_rule.min }}"
            form="{{ product_form_id }}">
          <button
            class="quantity__button"
            name="plus"
            type="button">
            <span class="visually-hidden">
              {{- 'products.product.quantity.increase' | t: product: product.title | escape -}}
            </span>
            {% render 'icon-plus' %}
          </button>
        </quantity-input>
        {%- liquid
          assign volume_pricing_array = product.selected_or_first_available_variant.quantity_price_breaks | sort: 'quantity' | reverse
          assign current_qty_for_volume_pricing = cart_qty | plus: product.selected_or_first_available_variant.quantity_rule.min
          if cart_qty > 0
            assign current_qty_for_volume_pricing = cart_qty | plus: product.selected_or_first_available_variant.quantity_rule.increment
          endif
        -%}
        {%- if product.quantity_price_breaks_configured? -%}
          <price-per-item
            id="Price-Per-Item-{{ section.id }}"
            data-section-id="{{ section.id }}"
            data-variant-id="{{ product.selected_or_first_available_variant.id }}">
            {%- if product.selected_or_first_available_variant.quantity_price_breaks.size > 0 -%}
              {%- assign variant_price_compare = product.selected_or_first_available_variant.compare_at_price -%}
              <div class="price-per-item">
                {%- if variant_price_compare -%}
                  <dl class="price-per-item--current">
                    <dt class="visually-hidden">
                      {{ 'products.product.price.regular_price' | t }}
                    </dt>
                    <dd>
                      <s class="variant-item__old-price">
                        {{ variant_price_compare | money_with_currency }}
                      </s>
                    </dd>
                  </dl>
                {%- endif -%}
                {%- if current_qty_for_volume_pricing < volume_pricing_array.last.minimum_quantity -%}
                  {%- assign variant_price = product.selected_or_first_available_variant.price | money_with_currency
                  -%}
                  <span class="price-per-item--current">
                    {{- 'products.product.volume_pricing.price_at_each' | t: price: variant_price -}}
                  </span>
                {%- else -%}
                  {%- for price_break in volume_pricing_array -%}
                    {%- if current_qty_for_volume_pricing >= price_break.minimum_quantity -%}
                      {%- assign price_break_price = price_break.price | money_with_currency -%}
                      <span class="price-per-item--current">
                        {{-
                          'products.product.volume_pricing.price_at_each' | t: price: price_break_price
                        -}}
                      </span>
                      {%- break -%}
                    {%- endif -%}
                  {%- endfor -%}
                {%- endif -%}
              </div>
            {%- else -%}
              {%- assign variant_price = product.selected_or_first_available_variant.price | money_with_currency
              -%}
              {%- assign variant_price_compare = product.selected_or_first_available_variant.compare_at_price -%}
              <div class="price-per-item">
                {%- if variant_price_compare -%}
                  <dl class="price-per-item--current">
                    <dt class="visually-hidden">
                      {{ 'products.product.price.regular_price' | t }}
                    </dt>
                    <dd>
                      <s class="variant-item__old-price">
                        {{ variant_price_compare | money_with_currency }}
                      </s>
                    </dd>
                    <dt class="visually-hidden">
                      {{ 'products.product.price.sale_price' | t }}
                    </dt>
                    <dd>
                      <span class="price-per-item--current">
                        {{- 'products.product.volume_pricing.price_at_each' | t: price: variant_price -}}
                      </span>
                    </dd>
                  </dl>
                {%- else -%}
                  <span class="price-per-item--current">
                    {{- 'products.product.volume_pricing.price_at_each' | t: price: variant_price -}}
                  </span>
                {%- endif -%}
              </div>
            {%- endif -%}
          </price-per-item>
        {%- endif -%}
      </div>
      <button
            id="ProductSubmitButton-{{ section_id }}"
            type="submit"
            name="add"
            value=""
            class="product-form__submit button button--full-width {% if show_dynamic_checkout %}button--secondary{% else %}button--primary{% endif %}"
            {% if product.selected_or_first_available_variant.available == false or quantity_rule_soldout %}
              disabled
            {% endif %}
          >
            <span>
              {%- if product.selected_or_first_available_variant.available == false or quantity_rule_soldout -%}
                {{ 'products.product.sold_out' | t }}
              {%- else -%}
                {{ 'products.product.add_to_cart' | t }}
              {%- endif -%}
            </span>
            {%- render 'loading-spinner' -%}
          </button>
    </div>
    
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function () {
    const productCards = document.querySelectorAll(".product-card");
    const overlay = document.querySelector(".add-to-bag-overlay");
    const overlayBox = overlay.querySelector(".overlay-box");
    const drawerClose = overlay.querySelector(".drawer-close-icon");
    let variantColorId;          
    const button = document.getElementById("ProductSubmitButton-{{ section_id }}");
    let variantSizeId;  
    let sizeId;
    let colorId      

    drawerClose.addEventListener('click', () => {
        overlay.style.display = "none";
    });

    productCards.forEach(card => {
        card.addEventListener("click", () => {
            const handle = card.getAttribute("data-id");
            const title = card.getAttribute("data-title");
            const imageUrl = card.getAttribute("data-image");
            const price = card.getAttribute("data-price");
            const variantColor = card.getAttribute("data-color-ids").split(',');
            const variantSize = card.getAttribute("data-size-ids").split(',');

            let colorHTML = '';
            let sizeHTML = '';

            card.getAttributeNames().forEach(attr => {
                if (attr.startsWith("data-") && attr !== "data-id" && attr !== "data-title" && attr !== "data-image" && attr !== "data-variant-ids") {
                    const optionName = attr.replace("data-", "");
                    const optionValues = card.getAttribute(attr).split(', ');

                    if (optionName === 'color') {
                        colorHTML = `<div class="drawer-variant-color-container"><span> Color: </span>`;
                        optionValues.forEach((value, index) => {
                            colorHTML += `<span style="background:${value};" class="drawer-variant-color color-click" data-color-ids="${variantColor[index]}"></span>`;
                        });
                        colorHTML += `</div>`;
                    } else if (optionName === 'size') {
                        sizeHTML = `<div class="drawer-variant-size-container"><span> Size: </span>`;
                        optionValues.forEach((value, index) => {
                            sizeHTML += `<span class="drawer-size size-click" data-size-ids="${variantSize[index]}">${value}</span>`;
                        });
                        sizeHTML += `</div>`;
                    }
                }
            });

            overlayBox.innerHTML = `
                <div class="drawer-product-details">
                    <img src="${imageUrl}" alt="${title}" class="drawer-img">
                    <div class="drawer-product-title">
                        <h2 class="drawer-title">${title}</h2>
                        <span>${price}</span>
                    </div>
                </div>
                <div class="drawer-product-variant">
                    ${colorHTML}
                    ${sizeHTML}
                </div>
            `;

            overlay.style.display = "flex";

            let colorClick = document.querySelectorAll('.color-click');
            let sizeClick = document.querySelectorAll('.size-click');

            colorClick.forEach((e) => {
                e.addEventListener('click', () => {
                     variantColorId = e.getAttribute('data-color-ids');
                   
                     colorId = variantColorId; 
                     button.value =`${colorId}`;
                });
            });

            sizeClick.forEach((e) => {
                e.addEventListener('click', () => {
                    variantSizeId = e.getAttribute('data-size-ids');
                   
                     sizeId =  variantSizeId; 
                     button.value =`${sizeId}`;
                      
                  });
                });

              
                
              
            
        });
    });
});
</script>

{% schema %}
  {
    "name": "t:sections.main-collection-product-grid.name",
    "class": "section",
    "settings": [
      {
        "type": "range",
        "id": "products_per_page",
        "min": 8,
        "max": 36,
        "step": 4,
        "default": 16,
        "label": "t:sections.main-collection-product-grid.settings.products_per_page.label"
      },
      {
        "type": "range",
        "id": "columns_desktop",
        "min": 1,
        "max": 6,
        "step": 1,
        "default": 4,
        "label": "t:sections.main-collection-product-grid.settings.columns_desktop.label"
      },
      {
        "type": "color_scheme",
        "id": "color_scheme",
        "label": "t:sections.all.colors.label",
        "info": "t:sections.all.colors.has_cards_info",
        "default": "scheme-1"
      },
      {
        "type": "header",
        "content": "t:sections.main-collection-product-grid.settings.header__3.content"
      }, {
        "type": "select",
        "id": "image_ratio",
        "options": [
          {
            "value": "adapt",
            "label": "t:sections.main-collection-product-grid.settings.image_ratio.options__1.label"
          }, {
            "value": "portrait",
            "label": "t:sections.main-collection-product-grid.settings.image_ratio.options__2.label"
          }, {
            "value": "square",
            "label": "t:sections.main-collection-product-grid.settings.image_ratio.options__3.label"
          }
        ],
        "default": "adapt",
        "label": "t:sections.main-collection-product-grid.settings.image_ratio.label"
      }, {
        "type": "select",
        "id": "image_shape",
        "options": [
          {
            "value": "default",
            "label": "t:sections.all.image_shape.options__1.label"
          },
          {
            "value": "arch",
            "label": "t:sections.all.image_shape.options__2.label"
          },
          {
            "value": "blob",
            "label": "t:sections.all.image_shape.options__3.label"
          },
          {
            "value": "chevronleft",
            "label": "t:sections.all.image_shape.options__4.label"
          }, {
            "value": "chevronright",
            "label": "t:sections.all.image_shape.options__5.label"
          }, {
            "value": "diamond",
            "label": "t:sections.all.image_shape.options__6.label"
          }, {
            "value": "parallelogram",
            "label": "t:sections.all.image_shape.options__7.label"
          }, {
            "value": "round",
            "label": "t:sections.all.image_shape.options__8.label"
          }
        ],
        "default": "default",
        "label": "t:sections.all.image_shape.label",
        "info": "t:sections.all.image_shape.info"
      }, {
        "type": "checkbox",
        "id": "show_secondary_image",
        "default": false,
        "label": "t:sections.main-collection-product-grid.settings.show_secondary_image.label"
      }, {
        "type": "checkbox",
        "id": "show_vendor",
        "default": false,
        "label": "t:sections.main-collection-product-grid.settings.show_vendor.label"
      }, {
        "type": "checkbox",
        "id": "show_rating",
        "default": false,
        "label": "t:sections.main-collection-product-grid.settings.show_rating.label",
        "info": "t:sections.main-collection-product-grid.settings.show_rating.info"
      }, {
        "type": "select",
        "id": "quick_add",
        "default": "none",
        "label": "t:sections.main-collection-product-grid.settings.quick_add.label",
        "info": "t:sections.main-collection-product-grid.settings.quick_add.info",
        "options": [
          {
            "value": "none",
            "label": "t:sections.main-collection-product-grid.settings.quick_add.options.option_1"
          }, {
            "value": "standard",
            "label": "t:sections.main-collection-product-grid.settings.quick_add.options.option_2"
          }, {
            "value": "bulk",
            "label": "t:sections.main-collection-product-grid.settings.quick_add.options.option_3"
          }
        ]
      }, {
        "type": "header",
        "content": "t:sections.main-collection-product-grid.settings.header__1.content"
      }, {
        "type": "checkbox",
        "id": "enable_filtering",
        "default": true,
        "label": "t:sections.main-collection-product-grid.settings.enable_filtering.label",
        "info": "t:sections.main-collection-product-grid.settings.enable_filtering.info"
      }, {
        "type": "select",
        "id": "filter_type",
        "options": [
          {
            "value": "horizontal",
            "label": "t:sections.main-collection-product-grid.settings.filter_type.options__1.label"
          }, {
            "value": "vertical",
            "label": "t:sections.main-collection-product-grid.settings.filter_type.options__2.label"
          }, {
            "value": "drawer",
            "label": "t:sections.main-collection-product-grid.settings.filter_type.options__3.label"
          }
        ],
        "default": "horizontal",
        "label": "t:sections.main-collection-product-grid.settings.filter_type.label",
        "info": "t:sections.main-collection-product-grid.settings.filter_type.info"
      }, {
        "type": "checkbox",
        "id": "enable_sorting",
        "default": true,
        "label": "t:sections.main-collection-product-grid.settings.enable_sorting.label"
      }, {
        "type": "header",
        "content": "t:sections.main-collection-product-grid.settings.header_mobile.content"
      }, {
        "type": "select",
        "id": "columns_mobile",
        "default": "2",
        "label": "t:sections.main-collection-product-grid.settings.columns_mobile.label",
        "options": [
          {
            "value": "1",
            "label": "t:sections.main-collection-product-grid.settings.columns_mobile.options__1.label"
          }, {
            "value": "2",
            "label": "t:sections.main-collection-product-grid.settings.columns_mobile.options__2.label"
          }
        ]
      }, {
        "type": "header",
        "content": "t:sections.all.padding.section_padding_heading"
      }, {
        "type": "range",
        "id": "padding_top",
        "min": 0,
        "max": 100,
        "step": 4,
        "unit": "px",
        "label": "t:sections.all.padding.padding_top",
        "default": 36
      }, {
        "type": "range",
        "id": "padding_bottom",
        "min": 0,
        "max": 100,
        "step": 4,
        "unit": "px",
        "label": "t:sections.all.padding.padding_bottom",
        "default": 36
      }
    ]
  }
{% endschema %}